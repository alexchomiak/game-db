[{"/home/alex/cs480/cs480-final-project/client/src/index.tsx":"1","/home/alex/cs480/cs480-final-project/client/src/App.tsx":"2","/home/alex/cs480/cs480-final-project/client/src/pages/Auth.tsx":"3","/home/alex/cs480/cs480-final-project/client/src/components/AuthForm.tsx":"4","/home/alex/cs480/cs480-final-project/client/src/redux/splices/auth.ts":"5","/home/alex/cs480/cs480-final-project/client/src/redux/store.ts":"6"},{"size":759,"mtime":1607470182580,"results":"7","hashOfConfig":"8"},{"size":716,"mtime":1607470675080,"results":"9","hashOfConfig":"8"},{"size":854,"mtime":1607468576170,"results":"10","hashOfConfig":"8"},{"size":2172,"mtime":1607468753470,"results":"11","hashOfConfig":"8"},{"size":2375,"mtime":1607470609100,"results":"12","hashOfConfig":"8"},{"size":617,"mtime":1607469828510,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"eyud5y",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"17"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"17"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"17"},"/home/alex/cs480/cs480-final-project/client/src/index.tsx",["31"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport store from \"./redux/store\";\nimport { setUser } from \"./redux/splices/auth\";\nimport { Provider } from \"react-redux\";\n\n/*\n * NOTICE: If you are getting linter errors in your editor\n * make sure your editor is running Typescript v4.1.2 or above\n */\n\n// * Check for user in local storage\nconst serializedUser = localStorage.getItem(\"user\");\nif (serializedUser && serializedUser != \"\") {\n  const user = JSON.parse(serializedUser);\n  store.dispatch(setUser(user));\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n",["32","33"],"/home/alex/cs480/cs480-final-project/client/src/App.tsx",[],"/home/alex/cs480/cs480-final-project/client/src/pages/Auth.tsx",["34"],"import React, { FC, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Tab, Tabs } from \"react-bootstrap\";\nimport { AuthForm } from \"../components/AuthForm\";\nimport { login, register } from \"../redux/splices/auth\";\nexport const Auth: FC = () => {\n  const dispatch = useDispatch();\n  return (\n    <>\n      <Tabs defaultActiveKey=\"login\">\n        <Tab eventKey=\"login\" title=\"Login\">\n          <AuthForm\n            type=\"login\"\n            onSubmit={async (e) => {\n              dispatch(login(e));\n            }}\n          ></AuthForm>\n        </Tab>\n        <Tab eventKey=\"register\" title=\"Register\">\n          <AuthForm\n            type=\"register\"\n            onSubmit={async (e) => {\n              dispatch(register(e));\n            }}\n          ></AuthForm>\n        </Tab>\n      </Tabs>\n    </>\n  );\n};\nexport default Auth;\n","/home/alex/cs480/cs480-final-project/client/src/components/AuthForm.tsx",["35","36","37","38"],"import React, { useState, FC } from \"react\";\nimport {\n  Button,\n  Form,\n  FormControl,\n  FormGroup,\n  Label,\n  Tab,\n  Tabs,\n} from \"react-bootstrap\";\nexport interface AuthCreds {\n  email: string;\n  password: string;\n  firstName?: string;\n  lastName?: string;\n}\ninterface AuthFormProps {\n  type: string;\n  onSubmit: (v: AuthCreds) => void;\n}\nexport const AuthForm: FC<AuthFormProps> = ({ type, onSubmit }) => {\n  const [email, setEmail] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n  const [firstName, setFirstName] = useState<string>(\"\");\n  const [lastName, setLastName] = useState<string>(\"\");\n  return (\n    <>\n      <Form>\n        {type == \"register\" && (\n          <>\n            <FormGroup>\n              <FormControl\n                placeholder=\"Enter First Name\"\n                value={firstName}\n                onChange={(e) =>\n                  setFirstName((e.target as HTMLInputElement).value)\n                }\n              ></FormControl>\n            </FormGroup>\n            <FormGroup>\n              <FormControl\n                value={lastName}\n                placeholder=\"Enter Last Name\"\n                onChange={(e) =>\n                  setLastName((e.target as HTMLInputElement).value)\n                }\n              ></FormControl>\n            </FormGroup>\n          </>\n        )}\n\n        <FormGroup>\n          <FormControl\n            type=\"email\"\n            placeholder=\"Enter email\"\n            value={email}\n            onChange={(e) => setEmail((e.target as HTMLInputElement).value)}\n          ></FormControl>\n        </FormGroup>\n        <FormGroup>\n          <FormControl\n            value={password}\n            type=\"password\"\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword((e.target as HTMLInputElement).value)}\n          ></FormControl>\n        </FormGroup>\n\n        <Button\n          onClick={(e) => {\n            onSubmit({\n              email,\n              password,\n              firstName,\n              lastName,\n            });\n          }}\n        >\n          {type === \"register\" ? \"Register\" : \"Login\"}\n        </Button>\n      </Form>\n    </>\n  );\n};\n","/home/alex/cs480/cs480-final-project/client/src/redux/splices/auth.ts",["39","40"],"/home/alex/cs480/cs480-final-project/client/src/redux/store.ts",["41"],"import {\n  combineReducers,\n  configureStore,\n  ThunkAction,\n  Action,\n  ThunkDispatch,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport auth from \"./splices/auth\";\n\n// * Configure Reducers\nexport const rootReducer = combineReducers({ auth });\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\n// * Configure Store\nconst store = configureStore({\n  middleware: getDefaultMiddleware(),\n  reducer: rootReducer,\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type AppThunk = ThunkAction<void, RootState, unknown, Action<string>>;\nexport type AppStore = typeof store;\n\nexport default store;\n",{"ruleId":"42","severity":1,"message":"43","line":16,"column":38,"nodeType":"44","messageId":"45","endLine":16,"endColumn":40},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":1,"column":21,"nodeType":"52","messageId":"53","endLine":1,"endColumn":29},{"ruleId":"50","severity":1,"message":"54","line":7,"column":3,"nodeType":"52","messageId":"53","endLine":7,"endColumn":8},{"ruleId":"50","severity":1,"message":"55","line":8,"column":3,"nodeType":"52","messageId":"53","endLine":8,"endColumn":6},{"ruleId":"50","severity":1,"message":"56","line":9,"column":3,"nodeType":"52","messageId":"53","endLine":9,"endColumn":7},{"ruleId":"42","severity":1,"message":"57","line":29,"column":15,"nodeType":"44","messageId":"45","endLine":29,"endColumn":17},{"ruleId":"50","severity":1,"message":"58","line":3,"column":17,"nodeType":"52","messageId":"53","endLine":3,"endColumn":30},{"ruleId":"50","severity":1,"message":"59","line":16,"column":11,"nodeType":"52","messageId":"53","endLine":16,"endColumn":21},{"ruleId":"50","severity":1,"message":"60","line":6,"column":3,"nodeType":"52","messageId":"53","endLine":6,"endColumn":16},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-native-reassign",["61"],"no-negated-in-lhs",["62"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Label' is defined but never used.","'Tab' is defined but never used.","'Tabs' is defined but never used.","Expected '===' and instead saw '=='.","'AxiosResponse' is defined but never used.","'AuthResult' is defined but never used.","'ThunkDispatch' is defined but never used.","no-global-assign","no-unsafe-negation"]